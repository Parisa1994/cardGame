{"ast":null,"code":"var _jsxFileName = \"/Users/parisazamani/Projects/learn/practice-js/card-game-react/src/pages/home.js\";\nimport React from 'react';\nimport { Container, Button } from 'reactstrap';\n\nclass home extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      scoreValue: 0,\n      deck: [],\n      rank: [2, 3, 4, 5, 6, 7, 8, 9, \"J\", \"Q\", \"K\", \"A\"],\n      cardName: [\"pick\", \"khesht\", \"del\", \"khaj\"],\n      isStart: false\n    };\n\n    this.playGame = e => {\n      this.setState(prevState => ({\n        isStart: !prevState.isStart\n      }));\n      let temp = e.target.innerText;\n      console.log(temp);\n      let myCard = this.drawCard();\n\n      if (temp === \"start\") {\n        console.log(\"click start\");\n        this.makeCard();\n      }\n    };\n\n    this.drawCard = () => {\n      if (this.state.deck.length > 0) {\n        var card = \"\";\n        return card;\n      } else {\n        this.makeDeck();\n        return this.drawCard();\n      }\n    };\n\n    this.drawCard = () => {\n      if (this.state.deck.length > 0) {\n        let randindex = Math.floor(Math.random() * this.state.deck.length);\n        let card = this.state.deck.splice(randindex);\n        return card;\n      } else {\n        this.makedeck();\n      }\n    };\n\n    this.makeDeck = () => {\n      const _this$state = this.state,\n            cardName = _this$state.cardName,\n            rank = _this$state.rank;\n      var deck = [];\n\n      for (let i = 0; i < cardName.length; i++) {\n        for (let j = 0; j < rank.length; j++) {\n          let card = {};\n          card.cardName = cardName[i];\n          card.rank = rank[j];\n          card.value = j + 1;\n          deck.push(card);\n        }\n      }\n\n      console.log(deck);\n    };\n  }\n\n  render() {\n    const isStart = this.state.isStart;\n    return React.createElement(Container, {\n      className: \"text-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, \"Score: \", React.createElement(\"div\", {\n      className: \"score\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, \"0\")), React.createElement(\"div\", {\n      className: \"message\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, isStart ? 'click in hight or lower' : ' click start'), React.createElement(\"div\", {\n      className: \"gameplay\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, isStart ? '{mycard.rank}' : ''), React.createElement(Button, {\n      type: \"button\",\n      className: \"\".concat(isStart ? 'btn-hidden' : '', \" ml-2 \"),\n      children: \"start\",\n      onClick: this.playGame,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }), isStart && React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, React.createElement(Button, {\n      type: \"button\",\n      className: \"ml-2\",\n      children: \"Highter\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }), React.createElement(Button, {\n      type: \"button\",\n      className: \"ml-2\",\n      children: \"Lower\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default home;","map":{"version":3,"sources":["/Users/parisazamani/Projects/learn/practice-js/card-game-react/src/pages/home.js"],"names":["React","Container","Button","home","Component","state","scoreValue","deck","rank","cardName","isStart","playGame","e","setState","prevState","temp","target","innerText","console","log","myCard","drawCard","makeCard","length","card","makeDeck","randindex","Math","floor","random","splice","makedeck","i","j","value","push","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,EAAoBC,MAApB,QAAkC,YAAlC;;AACA,MAAMC,IAAN,SAAmBH,KAAK,CAACI,SAAzB,CAAmC;AAAA;AAAA;AAAA,SAC/BC,KAD+B,GACvB;AACJC,MAAAA,UAAU,EAAE,CADR;AAEJC,MAAAA,IAAI,EAAE,EAFF;AAGJC,MAAAA,IAAI,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,GAAzB,EAA8B,GAA9B,EAAmC,GAAnC,EAAwC,GAAxC,CAHF;AAIJC,MAAAA,QAAQ,EAAE,CAAC,MAAD,EAAS,QAAT,EAAmB,KAAnB,EAA0B,MAA1B,CAJN;AAKJC,MAAAA,OAAO,EAAE;AALL,KADuB;;AAAA,SAS/BC,QAT+B,GASnBC,CAAD,IAAO;AACd,WAAKC,QAAL,CAAcC,SAAS,KAAK;AAACJ,QAAAA,OAAO,EAAE,CAACI,SAAS,CAACJ;AAArB,OAAL,CAAvB;AACA,UAAIK,IAAI,GAAGH,CAAC,CAACI,MAAF,CAASC,SAApB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ;AACA,UAAIK,MAAM,GAAG,KAAKC,QAAL,EAAb;;AACA,UAAGN,IAAI,KAAK,OAAZ,EAAoB;AAChBG,QAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACA,aAAKG,QAAL;AACH;AACJ,KAlB8B;;AAAA,SAoB/BD,QApB+B,GAoBpB,MAAM;AACb,UAAG,KAAKhB,KAAL,CAAWE,IAAX,CAAgBgB,MAAhB,GAAyB,CAA5B,EAA8B;AAC1B,YAAIC,IAAI,GAAG,EAAX;AACA,eAAOA,IAAP;AAEH,OAJD,MAIK;AACD,aAAKC,QAAL;AACA,eAAO,KAAKJ,QAAL,EAAP;AACH;AACJ,KA7B8B;;AAAA,SA+B/BA,QA/B+B,GA+BpB,MAAM;AACb,UAAG,KAAKhB,KAAL,CAAWE,IAAX,CAAgBgB,MAAhB,GAAuB,CAA1B,EAA4B;AACxB,YAAIG,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAc,KAAKxB,KAAL,CAAWE,IAAX,CAAgBgB,MAAzC,CAAhB;AACA,YAAIC,IAAI,GAAG,KAAKnB,KAAL,CAAWE,IAAX,CAAgBuB,MAAhB,CAAuBJ,SAAvB,CAAX;AACA,eAAOF,IAAP;AACH,OAJD,MAIK;AACD,aAAKO,QAAL;AACH;AACJ,KAvC8B;;AAAA,SAwC/BN,QAxC+B,GAwCpB,MAAM;AAAA,0BACa,KAAKpB,KADlB;AAAA,YACLI,QADK,eACLA,QADK;AAAA,YACKD,IADL,eACKA,IADL;AAEb,UAAID,IAAI,GAAG,EAAX;;AACA,WAAI,IAAIyB,CAAC,GAAC,CAAV,EAAaA,CAAC,GAAGvB,QAAQ,CAACc,MAA1B,EAAkCS,CAAC,EAAnC,EAAsC;AAClC,aAAI,IAAIC,CAAC,GAAC,CAAV,EAAaA,CAAC,GAAEzB,IAAI,CAACe,MAArB,EAA6BU,CAAC,EAA9B,EAAiC;AAC7B,cAAIT,IAAI,GAAG,EAAX;AACAA,UAAAA,IAAI,CAACf,QAAL,GAAgBA,QAAQ,CAACuB,CAAD,CAAxB;AACAR,UAAAA,IAAI,CAAChB,IAAL,GAAYA,IAAI,CAACyB,CAAD,CAAhB;AACAT,UAAAA,IAAI,CAACU,KAAL,GAAcD,CAAC,GAAC,CAAhB;AACA1B,UAAAA,IAAI,CAAC4B,IAAL,CAAUX,IAAV;AACH;AACJ;;AACDN,MAAAA,OAAO,CAACC,GAAR,CAAYZ,IAAZ;AACH,KArD8B;AAAA;;AAyD/B6B,EAAAA,MAAM,GAAG;AAAA,UACG1B,OADH,GACc,KAAKL,KADnB,CACGK,OADH;AAEL,WACI,oBAAC,SAAD;AAAW,MAAA,SAAS,EAAC,aAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAW;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAX,CADJ,EAEI;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEQA,OAAO,GACP,yBADO,GAGP,cALR,CAFJ,EAUI;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEIA,OAAO,GACP,eADO,GAGP,EALJ,CAVJ,EAmBI,oBAAC,MAAD;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAsB,MAAA,SAAS,YAAKA,OAAO,GAAG,YAAH,GAAkB,EAA9B,WAA/B;AAAyE,MAAA,QAAQ,EAAE,OAAnF;AAA4F,MAAA,OAAO,EAAE,KAAKC,QAA1G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAnBJ,EAqBQD,OAAO,IACH,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,MAAD;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAsB,MAAA,SAAS,EAAC,MAAhC;AAAsC,MAAA,QAAQ,EAAE,SAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAEI,oBAAC,MAAD;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAsB,MAAA,SAAS,EAAC,MAAhC;AAAuC,MAAA,QAAQ,EAAE,OAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CAtBZ,CADJ;AAgCH;;AA3F8B;;AA6FnC,eAAeP,IAAf","sourcesContent":["import React from 'react';\nimport { Container, Button } from 'reactstrap';\nclass home extends React.Component {\n    state = {  \n        scoreValue: 0,\n        deck :[],\n        rank: [2, 3, 4, 5, 6, 7, 8, 9, \"J\", \"Q\", \"K\", \"A\"],\n        cardName: [\"pick\", \"khesht\", \"del\", \"khaj\" ],\n        isStart: false,\n    }\n\n    playGame = (e) => {\n        this.setState(prevState => ({isStart: !prevState.isStart}));\n        let temp = e.target.innerText;\n        console.log(temp);\n        let myCard = this.drawCard();\n        if(temp === \"start\"){\n            console.log(\"click start\")\n            this.makeCard();\n        }\n    }\n\n    drawCard = () => {\n        if(this.state.deck.length > 0){\n            var card = \"\" ;\n            return card;\n    \n        }else{\n            this.makeDeck();\n            return this.drawCard();\n        }\n    }\n\n    drawCard = () => {\n        if(this.state.deck.length>0){\n            let randindex = Math.floor(Math.random()*this.state.deck.length);\n            let card = this.state.deck.splice(randindex);\n            return card;\n        }else{\n            this.makedeck();\n        }\n    }\n    makeDeck = () => {\n        const { cardName, rank} = this.state;\n        var deck = [];\n        for(let i=0; i < cardName.length; i++){\n            for(let j=0; j< rank.length; j++){\n                let card = {};\n                card.cardName = cardName[i];\n                card.rank = rank[j];\n                card.value = (j+1);\n                deck.push(card);\n            }\n        }\n        console.log(deck);\n    }\n\n\n\n    render() {\n        const { isStart} = this.state;\n        return ( \n            <Container className=\"text-center\">\n                <h2>Score: <div className=\"score\">0</div></h2>\n                <div className=\"message\">\n                    {\n                        isStart ?\n                        'click in hight or lower'\n                        : \n                        ' click start'\n                    }\n                </div>\n                <div className=\"gameplay\">\n                {\n                    isStart ? \n                    '{mycard.rank}'\n                    :\n                    ''\n                }\n                \n                </div>\n                <Button type=\"button\" className={`${isStart ? 'btn-hidden' : ''} ml-2 `} children={\"start\"} onClick={this.playGame} />\n                {\n                    isStart && (\n                        <React.Fragment>\n                            <Button type=\"button\" className=\"ml-2\"children={\"Highter\"}  />\n                            <Button type=\"button\" className=\"ml-2\" children={\"Lower\"}  />\n                        </React.Fragment>\n                    )\n                }\n                \n            </Container>\n        );\n    }\n}\nexport default home;"]},"metadata":{},"sourceType":"module"}